{
 "layout": {
  "title": "CDF - Sample structure",
  "rows": [
   {
    "id": "4289f32a-d232-61cc-3d3b-83b719691cb3",
    "type": "LayoutResourceCode",
    "typeDesc": "Resource",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "name",
      "value": "Styles",
      "type": "Id"
     },
     {
      "name": "resourceType",
      "value": "Css",
      "type": "Label"
     },
     {
      "name": "resourceCode",
      "value": ".axis path,\n.axis line {\n    fill: none;\n\tstroke: black;\n\tshape-rendering: crispEdges;\n}\n.axis text {\n\tfont-family: sans-serif;\n\tfont-size: 11px;\n}\n\nrect {\n\t-moz-transition: all 0.3s;\n\t-webkit-transition: all 0.3s;\n\t-o-transition: all 0.3s;\n\ttransition: all 0.3s;\n}\nrect:hover{\n\tfill: orange;\n} ",
      "type": "Resource"
     }
    ]
   },
   {
    "id": "a2efd647-9c3e-aa64-787e-45da2a9ca24a",
    "type": "LayoutRow",
    "typeDesc": "Row",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "height",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "backgroundColor",
      "value": "",
      "type": "Color"
     },
     {
      "name": "roundCorners",
      "value": "",
      "type": "RoundCorners"
     },
     {
      "name": "textAlign",
      "value": "",
      "type": "TextAlign"
     },
     {
      "name": "cssClass",
      "value": "",
      "type": "String"
     }
    ]
   },
   {
    "id": "38d4c4e8-2488-b000-eda5-49d31ec3871a",
    "type": "LayoutColumn",
    "typeDesc": "Column",
    "parent": "a2efd647-9c3e-aa64-787e-45da2a9ca24a",
    "properties": [
     {
      "name": "name",
      "value": "Column222",
      "type": "Id"
     },
     {
      "name": "columnSpan",
      "value": 5,
      "type": "Integer"
     },
     {
      "name": "columnPrepend",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "columnAppend",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "columnPrependTop",
      "value": "false",
      "type": "Boolean"
     },
     {
      "name": "columnAppendBottom",
      "value": "false",
      "type": "Boolean"
     },
     {
      "name": "columnBorder",
      "value": "false",
      "type": "Boolean"
     },
     {
      "name": "columnBigBorder",
      "value": "false",
      "type": "Boolean"
     },
     {
      "name": "height",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "backgroundColor",
      "value": "",
      "type": "Color"
     },
     {
      "name": "roundCorners",
      "value": "",
      "type": "RoundCorners"
     },
     {
      "name": "textAlign",
      "value": "",
      "type": "TextAlign"
     },
     {
      "name": "cssClass",
      "value": "",
      "type": "String"
     }
    ]
   },
   {
    "id": "609f26e7-a5af-a6c0-acdb-caebe96945d1",
    "type": "LayoutHtml",
    "typeDesc": "Html",
    "parent": "38d4c4e8-2488-b000-eda5-49d31ec3871a",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "html",
      "value": "<body>\n    <button id=\"sort\" onclick=\"sortBars()\">Sort</button>\n    <button id=\"reset\" onclick=\"reset()\">Reset</button>\n</body> ",
      "type": "Html"
     },
     {
      "name": "fontSize",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "color",
      "value": "",
      "type": "Color"
     },
     {
      "name": "cssClass",
      "value": "",
      "type": "String"
     }
    ]
   }
  ]
 },
 "components": {
  "rows": [
   {
    "id": "D3COMPONENTS",
    "name": "D3 Components",
    "type": "Label",
    "typeDesc": "<i>Group</i>",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "Group",
      "value": "D3 Components",
      "type": "Label"
     }
    ]
   },
   {
    "id": "81fd070e-cd95-4268-5329-6da1db9432f7",
    "type": "Componentsd3",
    "typeDesc": "D3 Component Component",
    "parent": "D3COMPONENTS",
    "properties": [
     {
      "name": "name",
      "value": "D3BarChart",
      "type": "Id"
     },
     {
      "name": "listeners",
      "value": "[]",
      "type": "Listeners"
     },
     {
      "name": "parameters",
      "value": "[]",
      "type": "ValuesArray"
     },
     {
      "name": "customfunction",
      "value": "function f(){\nvar w = 1000;\nvar h = 300;\n\nvar dataset = [ \n    { key: 0, value: 5 },\n\t{ key: 1, value: 10 },\n\t{ key: 2, value: 13 },\n\t{ key: 3, value: 19 },\n\t{ key: 4, value: 21 },\n\t{ key: 5, value: 25 },\n\t{ key: 6, value: 22 },\n\t{ key: 7, value: 18 },\n\t{ key: 8, value: 15 },\n\t{ key: 9, value: 13 },\n\t{ key: 10, value: 11 },\n\t{ key: 11, value: 12 },\n\t{ key: 12, value: 15 },\n\t{ key: 13, value: 20 },\n\t{ key: 14, value: 18 },\n\t{ key: 15, value: 17 },\n\t{ key: 16, value: 16 },\n\t{ key: 17, value: 18 },\n\t{ key: 18, value: 23 },\n\t{ key: 19, value: 25 } ];\n\nvar xScale = d3.scale.ordinal()\n\t\t\t\t.domain(d3.range(dataset.length))\n\t\t\t\t.rangeRoundBands([0, w], 0.05); \n\nvar yScale = d3.scale.linear()\n\t\t\t\t.domain([0, d3.max(dataset, function(d) {return d.value;})])\n\t\t\t\t.range([0, h]);\n\nvar key = function(d) {\n\treturn d.key;\n};\n\n//Create SVG element\nvar svg = d3.select(\"body\")\n\t\t\t.append(\"svg\")\n\t\t\t.attr(\"width\", w)\n\t\t\t.attr(\"height\", h);\n\n//Create bars\nsvg.selectAll(\"rect\")\n   .data(dataset, key)\n   .enter()\n   .append(\"rect\")\n   .attr(\"x\", function(d, i) {\n\t\treturn xScale(i);\n   })\n   .attr(\"y\", function(d) {\n\t\treturn h - yScale(d.value);\n   })\n   .attr(\"width\", xScale.rangeBand())\n   .attr(\"height\", function(d) {\n\t\treturn yScale(d.value);\n   })\n   .attr(\"fill\", function(d) {\n\t\treturn \"rgb(0, 0, \" + (d.value * 10) + \")\";\n   })\n\n\t//Tooltip\n\t.on(\"mouseover\", function(d) {\n\t\t//Get this bar's x/y values, then augment for the tooltip\n\t\tvar xPosition = parseFloat(d3.select(this).attr(\"x\")) + xScale.rangeBand() / 2;\n\t\tvar yPosition = parseFloat(d3.select(this).attr(\"y\")) + 14;\n\t\t\n\t\t//Update Tooltip Position & value\n\t\td3.select(\"#tooltip\")\n\t\t\t.style(\"left\", xPosition + \"px\")\n\t\t\t.style(\"top\", yPosition + \"px\")\n\t\t\t.select(\"#value\")\n\t\t\t.text(d.value);\n\t\td3.select(\"#tooltip\").classed(\"hidden\", false)\n\t})\n\t.on(\"mouseout\", function() {\n\t\t//Remove the tooltip\n\t\td3.select(\"#tooltip\").classed(\"hidden\", true);\n\t})\t;\n\n//Create labels\nsvg.selectAll(\"text\")\n   .data(dataset, key)\n   .enter()\n   .append(\"text\")\n   .text(function(d) {\n\t\treturn d.value;\n   })\n   .attr(\"text-anchor\", \"middle\")\n   .attr(\"x\", function(d, i) {\n\t\treturn xScale(i) + xScale.rangeBand() / 2;\n   })\n   .attr(\"y\", function(d) {\n\t\treturn h - yScale(d.value) + 14;\n   })\n   .attr(\"font-family\", \"sans-serif\") \n   .attr(\"font-size\", \"11px\")\n   .attr(\"fill\", \"white\");\n   \nvar sortOrder = false;\nvar sortBars = function () {\n    sortOrder = !sortOrder;\n    \n    sortItems = function (a, b) {\n        if (sortOrder) {\n            return a.value - b.value;\n        }\n        return b.value - a.value;\n    };\n\n    svg.selectAll(\"rect\")\n        .sort(sortItems)\n        .transition()\n        .delay(function (d, i) {\n        return i * 50;\n    })\n        .duration(1000)\n        .attr(\"x\", function (d, i) {\n        return xScale(i);\n    });\n\n    svg.selectAll('text')\n        .sort(sortItems)\n        .transition()\n        .delay(function (d, i) {\n        return i * 50;\n    })\n        .duration(1000)\n        .text(function (d) {\n        return d.value;\n    })\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"x\", function (d, i) {\n        return xScale(i) + xScale.rangeBand() / 2;\n    })\n        .attr(\"y\", function (d) {\n        return h - yScale(d.value) + 14;\n    });\n};\n// Add the onclick callback to the button\nd3.select(\"#sort\").on(\"click\", sortBars);\nd3.select(\"#reset\").on(\"click\", reset);\nfunction randomSort() {\n\n\t\n\tsvg.selectAll(\"rect\")\n        .sort(sortItems)\n        .transition()\n        .delay(function (d, i) {\n        return i * 50;\n    })\n        .duration(1000)\n        .attr(\"x\", function (d, i) {\n        return xScale(i);\n    });\n\n    svg.selectAll('text')\n        .sort(sortItems)\n        .transition()\n        .delay(function (d, i) {\n        return i * 50;\n    })\n        .duration(1000)\n        .text(function (d) {\n        return d.value;\n    })\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"x\", function (d, i) {\n        return xScale(i) + xScale.rangeBand() / 2;\n    })\n        .attr(\"y\", function (d) {\n        return h - yScale(d.value) + 14;\n    });\n}\nfunction reset() {\n\tsvg.selectAll(\"rect\")\n\t\t.sort(function(a, b){\n\t\t\treturn a.key - b.key;\n\t\t})\n\t\t.transition()\n        .delay(function (d, i) {\n        return i * 50;\n\t\t})\n        .duration(1000)\n        .attr(\"x\", function (d, i) {\n        return xScale(i);\n\t\t});\n\t\t\n\tsvg.selectAll('text')\n        .sort(function(a, b){\n\t\t\treturn a.key - b.key;\n\t\t})\n        .transition()\n        .delay(function (d, i) {\n        return i * 50;\n    })\n        .duration(1000)\n        .text(function (d) {\n        return d.value;\n    })\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"x\", function (d, i) {\n        return xScale(i) + xScale.rangeBand() / 2;\n    })\n        .attr(\"y\", function (d) {\n        return h - yScale(d.value) + 14;\n    });\n}\n}",
      "type": "JavaScript"
     },
     {
      "name": "dataSource",
      "value": "",
      "type": "Datasource"
     },
     {
      "name": "priority",
      "value": 5,
      "type": "Integer"
     },
     {
      "name": "width",
      "value": "1000",
      "type": "Integer"
     },
     {
      "name": "height",
      "value": "500",
      "type": "Integer"
     },
     {
      "name": "refreshPeriod",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "htmlObject",
      "value": "${p:Column222}",
      "type": "HtmlObject"
     },
     {
      "name": "executeAtStart",
      "value": "true",
      "type": "Boolean"
     },
     {
      "name": "preExecution",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "postFetch",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "postExecution",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "preChange",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "postChange",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "tooltip",
      "value": "",
      "type": "Html"
     }
    ]
   }
  ]
 },
 "datasources": {
  "rows": []
 },
 "filename": "/public/Explore/CDEExploring/Test2/D3BarCharSimpleExample.cdfde"
}